using Autofac.Extensions.DependencyInjection;
using Autofac;
using Microsoft.EntityFrameworkCore;
using Serilog;
using Serilog.Events;
using StackOverflow.Application;
using StackOverflow.Infrastructure;
using StackOverflow.Web;
using System.Reflection;
using Amazon.S3;
using Amazon.SQS;
using Mapster;
using Microsoft.AspNetCore.DataProtection;
using StackOverflow.Application.Contracts.Properties;
using StackOverflow.Infrastructure.DbContexts;
using StackOverflow.Infrastructure.Extensions;
using StackOverflow.Infrastructure.Email;
using StackOverflow.Web.ServiceConfigurations;
using ExceptionHandlerMiddleware = StackOverflow.Web.Middlewires.ExceptionHandlerMiddleware;

var builder = WebApplication.CreateBuilder(args);

var configuration = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json")
    .Build();

Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(configuration)
    .CreateBootstrapLogger();

try
{

    builder.Host.UseSerilog((ctx, lc) => lc
        .MinimumLevel.Debug()
        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
        .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Information)
        .Enrich.FromLogContext()
        .ReadFrom.Configuration(builder.Configuration));
       //.WriteTo.Async(x => x.Console())); //Throwing Error While Generating Migration

    // Add services to the container.
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") 
        ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");

    var migrationAssembly = Assembly.GetExecutingAssembly().FullName;
    //var recaptchaSecretKey = Environment.GetEnvironmentVariable("RECAPTCHA_SECRET_KEY", EnvironmentVariableTarget.User);
    
    builder.Services.Configure<RecaptchaSettings>(builder.Configuration.GetSection("Recaptcha"));

    builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());
    builder.Host.ConfigureContainer<ContainerBuilder>(b =>
    {
        b.RegisterModule(new ApplicationModule());
        b.RegisterModule(new InfrastructureModule());
        b.RegisterModule(new WebModule());
    });

    builder.Services.AddDbContext<ApplicationDbContext>(options =>
    {
        options.UseSqlServer(connectionString, 
                m => m.MigrationsAssembly(migrationAssembly));
        
        // Uncomment to see the Sql Generated By EF
        //     .EnableSensitiveDataLogging()
        //     .EnableDetailedErrors()
        //     .LogTo(Console.WriteLine, LogLevel.Debug); // Log SQL details at Information level
        //
        // options.UseLoggerFactory(LoggerFactory.Create(b => b.AddConsole())); // Log more details
    });

    builder.Services.AddDataProtection()
        .PersistKeysToFileSystem(new DirectoryInfo("/root/.aspnet/DataProtection-Keys"));

    builder.Services.AddDatabaseDeveloperPageExceptionFilter();

    builder.Services.AddIdentity();
    builder.Services.AddCookieAuthentication();
    
    builder.Services.AddAuthorization(options =>
    {
        options.AddPolicy("QuestionCreatePolicy", policy =>
        {
            policy.RequireClaim("CreateQuestion", "true");
        });
        
        options.AddPolicy("QuestionRetrievePolicy", policy =>
        {
            policy.RequireClaim("RetrieveQuestion", "true");
        });
    });
    
    // Add Email Services
	builder.Services.Configure<Smtp>(builder.Configuration.GetSection("Smtp"));
    
    // Add AWS services
    builder.Services.AddDefaultAWSOptions(builder.Configuration.GetAWSOptions());
    builder.Services.AddAWSService<IAmazonS3>();
    builder.Services.AddAWSService<IAmazonSQS>();
    builder.Services.Configure<AwsSettings>(builder.Configuration.GetSection("AWS"));
    
    //Add Mapster Services
    builder.Services.AddMapster();
    builder.Services.MapsterConfigurations();
    
    //Add Action Filters
    builder.Services.AddActionFilters();
    
	builder.Services.AddControllersWithViews();

    var app = builder.Build();

    // Configure the HTTP request pipeline.
    app.UseMiddleware<ExceptionHandlerMiddleware>();
    if (app.Environment.IsDevelopment())
    {
        app.UseMigrationsEndPoint();
    }
    else
    {
        app.UseHsts();
    }

    app.UseHttpsRedirection();
    app.UseStaticFiles();

    app.UseRouting();

    app.UseAuthentication();
    app.UseAuthorization();
    
    //Custom Route for Questions
    app.MapControllerRoute(
        name: "question",
        pattern: "Questions/{id:guid}",
        defaults: new { controller = "Question", action = "Question" });
    
    app.MapControllerRoute(
        name: "areas",
        pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");
    
    app.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");

    app.MapRazorPages();

    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Host terminated unexpectedly");
}
finally
{
    Log.CloseAndFlush();
}